import uuid
import hashlib
import datetime

from django.db import models
from django.contrib.auth.models import User
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.utils import timezone

# Create your models here.
class UserProfile(models.Model):
    user = models.OneToOneField(User)
    nickname = models.CharField(blank=True, max_length=30)
    contact_email = models.EmailField(blank=True, default="")
    self_introduction = models.TextField(blank=True, default="")


class ResetPasswordToken(models.Model):
    user = models.OneToOneField(User)
    
    # URL generated by sha256, so we need max_length=64
    url_token = models.CharField(max_length=64, unique=True, null=True)
    entry_token = models.CharField(max_length=64, blank=True)
    
    is_used = models.BooleanField(default=False)
    reach_count = models.IntegerField(default=0)

    created_time = models.DateTimeField(auto_now_add=True) 
    updated_time = models.DateTimeField(auto_now=True)
    expire_time = models.DateTimeField(auto_now_add=True)
    
    def is_valid(self):
        is_expired = timezone.now() > self.expire_time
        is_used = self.is_used
        is_over_reach = self.reach_count > 1

        return not (is_expired or is_used or is_over_reach)

    def init_or_reset(self):
    
        self.url_token = uuid.uuid4().hex
        # 因為 uuid 是有一定規律性的，所以經由 hash algorithm 來打亂規律
        # 而且因為是取 6 位作為驗證碼，在 uuid 的例子如果不這樣處理的話
        # 取到的區段在同一時間內會是重複的，容易被人猜到。
        entry_token_seed = str(uuid.uuid1()).encode("utf-8")
        entry_token = hashlib.md5(entry_token_seed).hexdigest()[10:16]
        self.entry_token = entry_token

        self.is_used = False    
        self.reach_count = 0

        current_time = timezone.localtime(timezone.now())
        accessible_time = current_time + datetime.timedelta(minutes=10)
        self.expire_time = accessible_time


@receiver(post_save, sender=User)
def create_profile(sender, instance=None, created=False, **kwargs):
    if created:
        UserProfile.objects.create(user=instance)

